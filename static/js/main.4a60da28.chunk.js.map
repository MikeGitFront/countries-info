{"version":3,"sources":["components/Item.js","graphql/countriesQuery.js","App.js","reportWebVitals.js","index.js"],"names":["Item","continent","name","iso","emoji","style","padding","borderRadius","boxShadow","display","justifyContent","alignItems","margin","marginTop","GET_COUNTRIES","gql","App","useQuery","loading","data","useState","standartValues","setStandartValues","selectedValue","setSelectedValue","searchValue","setSearchValue","values","setValues","value","options","Search","Input","antIcon","LoadingOutlined","fontSize","spin","useEffect","countries","changeValue","newValues","filter","item","className","flexDirection","defaultValue","marginBottom","minWidth","onChange","map","option","Option","placeholder","onSearch","trim","filteredValues","toLowerCase","code","length","includes","e","target","width","indicator","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","cache","InMemoryCache","uri","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a60da28.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Item = ({ continent, name, iso, emoji }) => {\r\n    return (\r\n        <div style={{ padding: '10px 16px', borderRadius: '1px solid black', boxShadow: '0px 0px 2px 1px black' }}>\r\n            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                <h3 style={{ margin: '0 10px 0 0' }}>{name}</h3>\r\n                <p style={{ margin: 0 }}>{emoji}</p>\r\n            </div>\r\n            <div style={{ marginTop: '10px' }}>\r\n                <p style={{ margin: 0 }}>ISO code: {iso}</p>\r\n                <p style={{ margin: 0 }}>Continent: {continent}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Item\r\n","import { gql } from '@apollo/client'\r\n\r\nexport const GET_COUNTRIES = gql`\r\n    query {\r\n        countries {\r\n            code\r\n        name\r\n        emoji\r\n        emojiU\r\n        continent {\r\n            name\r\n      }\r\n    }\r\n  }\r\n`","import { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport { useQuery } from '@apollo/client'\r\nimport Item from './components/Item';\r\nimport { Input, Select, Spin } from 'antd'\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\nimport { GET_COUNTRIES } from './graphql/countriesQuery';\r\n\r\n\r\n\r\nfunction App() {\r\n  const { loading, data } = useQuery(GET_COUNTRIES)\r\n  const [standartValues, setStandartValues] = useState([])\r\n  const [selectedValue, setSelectedValue] = useState('')\r\n  const [searchValue, setSearchValue] = useState('')\r\n  const [values, setValues] = useState([])\r\n  const [options] = useState([\r\n    { value: 'All' },\r\n    { value: 'Europe' },\r\n    { value: 'Asia' },\r\n    { value: 'North America' },\r\n    { value: 'South America' },\r\n    { value: 'Oceania' },\r\n    { value: 'Africa' },\r\n    { value: 'Antarctica' },\r\n  ])\r\n\r\n  const { Search } = Input\r\n  const antIcon = <LoadingOutlined style={{ fontSize: 48 }} spin />;\r\n\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      setStandartValues(data.countries)\r\n      setValues(data.countries)\r\n    }\r\n  }, [data, loading])\r\n\r\n  const changeValue = (value) => {\r\n    setSearchValue('')\r\n    if (value === 'All') {\r\n      setValues(standartValues)\r\n    }\r\n    else {\r\n      const newValues = standartValues.filter(item => item.continent.name === value)\r\n      setValues(newValues)\r\n    }\r\n    setSelectedValue(value)\r\n  }\r\n\r\n\r\n  const onSearch = (value) => {\r\n    if ((value.trim() !== '' && selectedValue === '') || (value.trim() !== '' && selectedValue === 'All')) {\r\n      const filteredValues = standartValues.filter(item => {\r\n        return item.name.toLowerCase() === value.toLowerCase() || item.code.toLowerCase() === value.toLowerCase()\r\n      })\r\n      let data\r\n      if (value.length > 2) {\r\n        data = standartValues.filter(item => {\r\n          return item.name.toLowerCase().includes(value.toLowerCase())\r\n        })\r\n        setValues(data)\r\n      }\r\n      else {\r\n        setValues(filteredValues)\r\n      }\r\n    }\r\n    else if (value.trim() !== '' && (selectedValue !== '' || 'All')) {\r\n      const filteredValues = standartValues.filter(item => {\r\n        return (item.continent.name === selectedValue && item.name.toLowerCase() === value.toLowerCase()) || (item.continent.name === selectedValue && item.code.toLowerCase() === value.toLowerCase())\r\n      })\r\n      let data\r\n      if (value.length > 2) {\r\n        data = standartValues.filter(item => {\r\n          return item.name.toLowerCase().includes(value.toLowerCase())\r\n        })\r\n        setValues(data)\r\n      }\r\n      else {\r\n        setValues(filteredValues)\r\n      }\r\n    }\r\n    else {\r\n      setValues(standartValues)\r\n    }\r\n\r\n  }\r\n\r\n  const onInputChange = (e) => {\r\n    if (e.target.value === '') {\r\n      selectedValue === '' ? setValues(standartValues) : changeValue(selectedValue)\r\n      setSearchValue('')\r\n    }\r\n    else {\r\n      if (values.length === 0) {\r\n      }\r\n      setSearchValue(e.target.value)\r\n    }\r\n  }\r\n\r\n  return (\r\n\r\n    <div className=\"App\">\r\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n        <h1>Country Finder</h1>\r\n\r\n        <Select\r\n          defaultValue={\"Choose continent\"}\r\n          style={{ marginBottom: '10px', minWidth: '160px' }}\r\n          onChange={(value) => changeValue(value)}\r\n        >\r\n          {options.map(option => <Select.Option key={option.value} value={option.value}>{option.value}</Select.Option>)}\r\n        </Select>\r\n        <Search\r\n          value={searchValue}\r\n          placeholder=\"Find country by name or ISO code...\"\r\n          onSearch={onSearch}\r\n          onChange={onInputChange}\r\n          style={{ width: 300, marginBottom: 10 }} />\r\n        {loading && <Spin indicator={antIcon} ></Spin>}\r\n        {(values.length === 0 && !loading) && <h2>No results for {searchValue} {selectedValue !== '' ? `in ${selectedValue}` : null}</h2>}\r\n        <div className='container'>\r\n          {values.length !== 0\r\n            && values.map(item =>\r\n              <Item\r\n                emoji={item.emoji}\r\n                key={item.name}\r\n                iso={item.code}\r\n                name={item.name}\r\n                continent={item.continent.name}></Item>)\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\r\n\r\nconst client = new ApolloClient({\r\n  cache: new InMemoryCache(),\r\n  uri: 'https://countries.trevorblades.com/',\r\n})\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ApolloProvider client={client}>\r\n      <App />\r\n    </ApolloProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}